#[derive(Debug, Clone)]
pub struct Array2<T: Clone> {
    width: usize,
    height: usize,
    data: Vec<Vec<T>>,
}

impl<T: Clone> Array2<T> {
    pub fn new(width: usize, height: usize, init_value: T) -> Self {
        Array2 {
            width: width,
            height: height,
            data: vec![vec![init_value; width]; height],
        }
    }

    // Will make an array from the given cols, it'll fill the array2, right now its just
    // filling with one value in every index, we want the correct ones though
    pub fn from_col_major(width: usize, height: usize, data: Vec<T>) -> Self {
        let mut data: Vec<Vec<T>> = vec![vec![data[0].clone(); width]; height];
        for c in 0..width {
            for a in 0..height {
                let index: usize = c * height + a;
                data[index] = data[a * width + c].clone();
            }
        }
        Array2 {
            data: data,
            width,
            height,
        }
    }

    pub fn get(&self, x: usize, y: usize) -> Option<&T> {
        self.data.get(y)?.get(x)
    }

    pub fn get_mut(&mut self, x: usize, y: usize) -> Option<&mut T> {
        self.data.get_mut(y)?.get_mut(x)
    }

    pub fn set(&mut self, x: usize, y: usize, value: T) -> bool {
        match self.get_mut(x, y) {
            Some(existing_value) => {
                *existing_value = value;
                true
            }
            None => false,
        }
    }

    pub fn iter_row_major(&self) -> impl Iterator<Item = (usize, usize, &T)> {
        self.data
            .iter()
            .enumerate()
            .flat_map(|(y, row)| row.iter().enumerate().map(move |(x, value)| (x, y, value)))
    }

    pub fn iter_col_major(&self) -> impl Iterator<Item = (usize, usize, &T)> {
        (0..self.width).flat_map(move |x| (0..self.height).map(move |y| (x, y, &self.data[y][x])))
    }
}

//adding test cases to make sure our functions are accurate
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn example_test() {
        let my_arr2 = Array2::new(3, 2, 'a');

        let collected_data: Vec<_> = my_arr2.iter_col_major().collect();
        assert_eq!(
            collected_data,
            vec![
                (0, 0, &'a'),
                (0, 1, &'a'),
                (1, 0, &'a'),
                (1, 1, &'a'),
                (2, 0, &'a'),
                (2, 1, &'a'),
            ]
        );
    }

    #[test]
    fn check_w_and_h() {
        let my_arr2 = Array2::new(3, 2, 0);
        assert_eq!(my_arr2.width, 3);
        assert_eq!(my_arr2.height, 2);
    }
}
